package routines;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class KeyVal {

	
	/** value have classifications. */
	public static final int C_ALL = 0xffff;

	
	
	/** the key of a key/value pair, not null if value set. */
	protected String cKey = null;
	
	/** the original value of a key/value pair, may be null. */
	protected Object cVal = null;
	
	/** the escaped value of a key/value pair (original value, if no escaping defined). */
	protected Object cValEsc = null;
	
	/** binary classification of this value. currently 16 bit/classifications available, default: C_ALL */
	protected int cClassification = C_ALL;

	
	// Constructors
	
	
	/**
	 * Constructor, create a key/value pair with default classification C_ALL.
	 * @param pKey
	 * @param pVal
	 */
	public KeyVal(String pKey, Object pVal) {
		this( pKey, pVal, C_ALL );
	}

	/**
	 * Constructor, create a key/value pair with specified classification (non default).
	 * @param pKey
	 * @param pVal
	 * @param pClassification
	 */
	public KeyVal(String pKey, Object pVal, int pClassification) {
		set( pKey, pVal, pClassification );
	}
	
	/**
	 * Constructor for subclassing.
	 * @param pKey
	 * @param pVal
	 */
	protected KeyVal() {
	}

	
	// Methods
	
	
	/**
	 * Set a key/value pair with default classification C_ALL.
	 * @param pKey
	 * @param pVal
	 */
	public void set(String pKey, Object pVal) {
		set(pKey, pVal, C_ALL);
	}
	
	/**
	 * Set a key/value pair with specified classification (non default).
	 * @param pKey
	 * @param pVal
	 * @param pClassification
	 */
	public void set(String pKey, Object pVal, int pClassification) {
		setKey(pKey);
		setClassification(pClassification);
		setVal(pVal);
	}
	
	/**
	 * Get the key.
	 * @return the key
	 */
	public String getKey() {
		return cKey;
	}

	/**
	 * Set the key. This function is internal. Setting the key is only allowed together with a value.
	 * @param pKey the key to set. Null keys are automatically converted to empty string.
	 */
	protected void setKey(String pKey) {
		cKey = StringTool.nullToEmpty(pKey);
	}

	/**
	 * Get the value.
	 * @return the value.
	 */
	public Object getVal() {
		return cVal;
	}

	/**
	 * Change the value, only if the key is already known. Setting also escaped value.
	 * @param pVal the value to set.
	 * @return the old value.
	 */
	public Object setVal(Object pVal) {
		setValEscaped(pVal);
		return setValInternal(pVal);
	}

	/**
	 * Change the value, only if the key is already known (internal version, set only raw value).
	 * @param pVal the value to set.
	 * @return the old value.
	 */
	public Object setValInternal(Object pVal) {
		if (cKey == null) {
			throw new NullPointerException("Changing value for unknown key. Key is null!");
		}
		Object mOld = cVal;
		cVal = pVal;
		return mOld;
	}

	/**
	 * Get the classification.
	 * @return the classification.
	 */
	public int getClassification() {
		return cClassification;
	}

	/**
	 * Change the classification.
	 * @param pClassification the classification to set.
	 * @return the old value.
	 */
	public Object setClassification(int pClassification) {
		int mOld = cClassification;
		cClassification = pClassification;
		return mOld;
	}

	/**
	 * Get the value in escaped version.
	 * On default implementation the escaped value is equal to the original value (no destination format defined).
	 * @return the value.
	 */
	public Object getValEscaped() {
		return cValEsc;
	}

	/**
	 * Change the value, only if the key is already known
	 * @param pVal the value to set.
	 * @return the old value.
	 */
	protected void setValEscaped(Object pVal) {
		cValEsc = escape(pVal);
	}

	/**
	 * Default escape implementation (no escaping). The classification is always set before value. So on escaping the new classification is known.
	 * @param pVal
	 * @return the escaped value
	 */
	protected Object escape(Object pVal) {
		return pVal;
	}
	
	
	// static
	
	
	/**
	 * Get the keys (have any classification, not return keys with 0 classification).
	 * @param pKeyVals (for List specify myList.toArray()).
	 * @return list of keys, never null (for String[] specify getKeys(...).toArray();
	 */
	public static ArrayList<String> getKeys(KeyVal[] pKeyVals) {
		return getKeys(pKeyVals, C_ALL);
	}

	/**
	 * Get the keys (have at least one of specified binary classifications).
	 * @param pKeyVals (for List specify myList.toArray()).
	 * @param pClassification
	 * @return list of keys, never null (for String[] specify getKeys(...).toArray();
	 */
	public static ArrayList<String> getKeys(KeyVal[] pKeyVals, int pClassification) {
		ArrayList<String> mRes = new ArrayList<String>((pKeyVals == null) ? 0 : pKeyVals.length);
		for (KeyVal mKeyVal : pKeyVals ) {
			if ((mKeyVal.getClassification() & pClassification) > 0) {
				mRes.add(mKeyVal.getKey());
			}
		}
		return mRes;
	}
	
	/**
	 * Get the values (have any classification, not return keys with 0 classification).
	 * @param pKeyVals (for List specify myList.toArray()).
	 * @return list of values, never null (for Object[] specify getValues(...).toArray();
	 */
	public static ArrayList<Object> getValues(KeyVal[] pKeyVals) {
		return getValues(pKeyVals, C_ALL);
	}
	
	/**
	 * Get the values (have at least one of specified binary classifications).
	 * @param pKeyVals (for List specify myList.toArray()).
	 * @param pClassification
	 * @return list of values, never null (for Object[] specify getValues(...).toArray();
	 */
	public static ArrayList<Object> getValues(KeyVal[] pKeyVals, int pClassification) {
		ArrayList<Object> mRes = new ArrayList<Object>((pKeyVals == null) ? 0 : pKeyVals.length);
		for (KeyVal mKeyVal : pKeyVals ) {
			if ((mKeyVal.getClassification() & pClassification) > 0) {
				mRes.add(mKeyVal.getVal());
			}
		}
		return mRes;
	}
	
	/**
	 * Get the escaped values (have any classification, not return keys with 0 classification).
	 * @param pKeyVals (for List specify myList.toArray()).
	 * @return list of escaped values, never null (for Object[] specify getEscapedValues(...).toArray();
	 */
	public static ArrayList<Object> getEscapedValues(KeyVal[] pKeyVals) {
		return getEscapedValues(pKeyVals, C_ALL);
	}
	
	/**
	 * Get the escaped values (have at least one of specified binary classifications).
	 * @param pKeyVals (for List specify myList.toArray()).
	 * @param pClassification
	 * @return list of escaped values, never null (for Object[] specify getEscapedValues(...).toArray();
	 */
	public static ArrayList<Object> getEscapedValues(KeyVal[] pKeyVals, int pClassification) {
		ArrayList<Object> mRes = new ArrayList<Object>((pKeyVals == null) ? 0 : pKeyVals.length);
		for (KeyVal mKeyVal : pKeyVals ) {
			if ((mKeyVal.getClassification() & pClassification) > 0) {
				mRes.add(mKeyVal.getValEscaped());
			}
		}
		return mRes;
	}

	/**
	 * Merge two KeyVal arrays. Type of second array elements must be assignable to first array. Helper for extend arrays. 
	 * @param pT1 must not be null.
	 * @param pT2 must have elements of same type of pT1 (or subclass pT1 element type)
	 * @return return the merged array with type of pT1.
	 */
	public static <T extends KeyVal> T[] merge(T[] pT1, T[] pT2) {
		List<T> mRes = Arrays.asList(pT1);
		if (pT2 != null) {
			mRes.addAll(Arrays.asList(pT2));
		}
		return mRes.toArray(pT1);
	}
	
	
	// toString
	
	
	/**
	 * Build a String representation for e.g. logging/dumping. Overwrite, if want show also classification.
	 */
	@Override
	public String toString() {
		return "KeyVal: " + cKey + "=" + cVal +"(cl:" + cClassification + ")";
	}
	
}
