/*
 * (c)2002 Bayer AG Leverkusen, Bayer Business Solutions
 * All rights reserved.
 */

package routines;

/**
 * This class does exactly the same as the unix programs uuencode/uudecode.
 * How to use:
 * 
 *   String    encodedStr    = Base64.encode( txt            ).toString();
 *   String    encodeFrmByts = Base64.encode( txt.getBytes() ).toString();
 *   byte[]    decoded	  = new Base64( encodedStr ).decode();
 *   String    decodedStr    = new Base64( encodedStr ).decodeAsString();
 *   "encodedStr" & "encodeFrmByts" are identical (once with constructor for String, once for byte[]).
 */
public class Base64
{

    byte b64[];


    public Base64(String s) {
        b64 = StringTool.replace( StringTool.nullToEmpty(s), "\n\r\t \0x00", new String[] { "", "", "", "", "" } ).getBytes();
    }


    protected Base64(byte b[]) {
	b64 = b;
    }


    public static Base64 encode(String s) {
        return encode(s.getBytes());
    }

 
    public static Base64 encode(byte b0[]) {
        byte b1[] = new byte[((b0.length + 2) / 3) * 4];
        int i = 0;
        int k = 0;
        while(i < b0.length - 2) {
            b1[k++] = (byte)((b0[i] & 0xfc) >>> 2);
            b1[k++] = (byte)((b0[i++] & 0x3) << 4 | b0[i] >>> 4 & 0xf);
            b1[k++] = (byte)((b0[i++] & 0xf) << 2 | b0[i] >>> 6 & 0x3);
            b1[k++] = (byte)(b0[i++] & 0x3f);
        }

        int l = b0.length % 3;
        if(l > 0)
            b1[k++] = (byte)((b0[i] & 0xfc) >>> 2);
        if(l == 1) {
            b1[k++] = (byte)((b0[i] & 0x3) << 4);
            b1[k++] = 64;
            b1[k++] = 64;
        } else if(l == 2) {
            b1[k++] = (byte)((b0[i++] & 0x3) << 4 | b0[i] >>> 4 & 0xf);
            b1[k++] = (byte)((b0[i++] & 0xf) << 2);
            b1[k++] = 64;
        }
        for(int j = 0; j < b1.length; j++) {
            b1[j] = encodingTab[b1[j]];
	}

        return new Base64(b1);
    }


    public byte[] decode() {
        if ( b64.length < 2 )
            return new byte[0];
        for(int i = 0; i < b64.length; i++)
            b64[i] = decodingTab[b64[i]];

        int j;
        for(j = 2; j > 0; j--)
            if(b64[b64.length - j] < 0)
                break;

        byte b0[] = new byte[(b64.length / 4) * 3 - j];
        int k = 0;
        int l = 0;
        while(k < b0.length) {
            b0[k++] = (byte)(b64[l++] << 2 | b64[l] >>> 4 & 0x3);
            if(k >= b0.length)
                break;
            b0[k++] = (byte)(b64[l++] << 4 & 0xf0 | b64[l] >>> 2 & 0xf);
            if(k >= b0.length)
                break;
            b0[k++] = (byte)(b64[l++] << 6 & 0xc0 | b64[l++]);
        }

        return b0;
    }


    public String decodeAsString() {
	return new String(decode());
    }


    @Override
	public String toString() {
        return toString(0);
    }

    public String toString( int lineWidth ) {
        if ( lineWidth < 1 ) {
            return new String ( b64 );
        } else {
            byte b0[] = new byte[b64.length + b64.length / lineWidth];
            int i = 0;
            for(int j = 0; j < b64.length; j++) {
                b0[i++] = b64[j];
                if(j % lineWidth == (lineWidth-1))
                    b0[i++] = 10;
            }
            return new String(b0);
        }
    }


    private static final byte decodingTab[] = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 62, -1, -1, -1, 63, 52, 53,
        54, 55, 56, 57, 58, 59, 60, 61, -1, -1,
        -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,
         5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, -1, -1, -1, -1, -1, -1, 26, 27, 28,
        29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, -1, -1, 62, 63, -1, -1, -1,
       	-1, -1, -1, -1, -1
    };


    /* ORIGINAL Base64 spec:
     * 
     * Base64Binary  ::=	( ( B64S B64S B64S B64S             )*
     *				  ( ( B64S B64S B64S B64      ) |
     *				    ( B64S B64S B16S '='      ) |
     *				    ( B64S B04S '=' #x20? '=' )   ) )?
     *
     *	B64S         ::= B64 #x20?
     *
     *	B16S         ::= B16 #x20?
     *
     *	B04S         ::= B04 #x20? 
     *
     *	B04         ::=  [AQgw]
     *	B16         ::=  [AEIMQUYcgkosw048]
     *	B64         ::=  [A-Za-z0-9+/] 
     *
     * 
     * #x20?	is an optional sequence of whitespaces
     * 
     * OLD encoding: A-Z, a-z, 0-9, }, ~, =    ==   ...125, 126, 61
     * NEW encoding: A-Z, a-z, 0-9, +, /, =    ==   ... 43,  47, 61
     * decoding supports BOTH encodings!!!
     * 
     */
    private static final byte encodingTab[] = {
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,
         75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
         85,  86,  87,  88,  89,  90,  97,  98,  99, 100,
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
        111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
        121, 122,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  43,  47,  61
    };
 

    /*
    public static void main(String args[]) {
	String tst = args[0];
	Base64 b = new Base64(tst);
	S ystem.out.p rintln(b.decodeAsString());
    }
    */
}


/*
 * $Log$
 * Revision 1.6  2007/10/23 15:45:32  imwif
 * bugfix, when decoding an empty string (AIOOB-Ex)
 *
 * Revision 1.5  2007/01/23 16:35:47  imwif
 * added description
 *
 * Revision 1.4  2007/01/23 16:12:59  imwif
 * Recovered version 1.2 of Base64 (due to accidently checked in changes)
 *
 * Revision 1.3  2007/01/18 12:50:03  ezjht
 * Inserted Crypt and Decrypt URDOC Methods
 *
 * 
 *    Rev 1.1   Apr 23 2003 08:13:02   IMWIF
 * comments changed
 * 
 *    Rev 1.0   Feb 25 2003 16:29:24   IMWIF
 * Initial revision.
 * 
 *    Rev 1.0   Feb 25 2003 10:59:56   IMWIF
 * Initial revision.
 * 
 *    Rev 1.0   Aug 14 2001 10:34:10   IMWIF
 * Initial revision.
 * Revision 1.1.1.1  2001/07/17 07:25:52  fw
 * initial
 *
 * Revision 1.3  2000/02/29 04:10:25  hj
 * merged from pzwov2-tree-B38
 *
 * Revision 1.2.4.1  2000/02/02 22:49:54  hj
 * S ystem.out.println...
 *
 * Revision 1.2  1999/10/12 13:42:34  hj
 * removed S ystem.out.p rintln
 *
 * Revision 1.1  1999/10/12 13:39:38  hj
 * class for base64 encoding/decoding (like UnixÂ´s uuencode)
 *
 */
