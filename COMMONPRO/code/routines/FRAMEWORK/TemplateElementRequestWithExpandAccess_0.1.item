package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 * 
 * 
 * <p>The TemplateElementRequest-interface allows to enhance the Template-expand-abilities of the Template class.
 * This base class is offering no additional abilities but when an effective subclass is used the abilities of that class can be used in Templates.</p>
 * <p>One such subclass already is provided in the <code>sbcommon</code>-package to allow access to DisplayTexts and translations</p>
 */
public abstract class TemplateElementRequestWithExpandAccess implements TemplateElementRequest {

	Template cTempl;
	
	/**
	 * Requires late setting of template for call-back.
	 * @param t
	 */
	public TemplateElementRequestWithExpandAccess() {
	}
	
	/**
	 * Allow late setting of template (must be before expand!!!)
	 * @param t
	 * @return this
	 */
	public TemplateElementRequestWithExpandAccess setTemplate( Template t ) {
		cTempl = t;
		return this;
	}

	/**
	 * Allow pre-expansion of value to be added to value pool.
	 * @param pDefinition
	 * @return
	 */
	protected String[] expandTemplateN( String pDefinition ) {
		return expandTemplateNCascaded( Template.toStringArray( pDefinition ) );
	}

	/**
	 * Allow CASCADED pre-expansion of value to be added to value pool (value has already internal StringArr format.
	 * @param pInternalTemplateStringArr
	 * @return
	 */
	protected String[] expandTemplateNCascaded( String[] pInternalTemplateStringArr ) {
		if (cTempl == null) {
			throw new TemplateSyntaxException( "Now template specified for callback!" );
		}
		return cTempl.expandAsArrayN( pInternalTemplateStringArr, true );
	}

}
