package routines;

import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class MapTool {

	  /**
	   * Add a value to a Map (null-save, key removed, if object is null).
	   * Create a new HashMap when Map is null, use given Map implementation otherwise.
	   */
	  public static final <K,V> Map<K,V> addToMap( Map<K,V> m, K key, V val ) {
	    if (m == null) {
	      m = new HashMap<K,V>(5, 1.0f);
	    }
	    if (key != null) {
	    	if (val != null) {
	    	  m.put( key, val );
	    	} else {
	    	  m.remove( key );
	    	}
	    }
	    return m;
	  }

	  /**
	   * Add a value to a Hashtable (null-save, key removed, if object is null).
	   */
	  public static final <K,V> Hashtable<K,V> addToHT( Hashtable<K,V> ht, K key, V val ) {
		  if (ht == null) {
			  ht = new Hashtable<K,V>(5);
		  }
		  if (key != null) {
			  if (val != null) {
				  ht.put( key, val );
			  } else {
				  ht.remove( key );
			  }
		  }
		  return ht;
	  }

}
