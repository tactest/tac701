package routines;
// lib
import java.util.Date;
import java.util.GregorianCalendar;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Date_Utils {

    /**
     * Renvoie un timestamp sur 10 digits (String) à partir d'une date (String)
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Date_Utils
     * 
     * {param} string("pattern_input_date") input: The string need to be printed.
     * {param} string("input_date") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static String convert_stringDate_to_unix_timestamp_10_digits(String Pattern, String InputSdate) {
    	long unix_timestamp = TalendDate.parseDate(Pattern,InputSdate).getTime()/1000;
    	return unix_timestamp+"";
        }

    /**
     * Renvoie un timestamp sur 13 digits (String) à partir d'une date (String)
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Date_Utils
     * 
     * {param} string("pattern_input_date") input: The string need to be printed.
     * {param} string("input_date") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static String convert_stringDate_to_unix_timestamp_13_digits(String Pattern, String InputSdate) {
    	long unix_timestamp = TalendDate.parseDate(Pattern,InputSdate).getTime();
    	return unix_timestamp+"";
        }

    
    
    /**
     * Renvoie une date (String) à partir d'un timestamp Unix (String) sur 10 digits
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Date_Utils
     * 
     * {param} long(input_timestamp) input: The string need to be printed.
     * {param} string("pattern_output_date") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
public static String convert_unix_timestamp_10_digits_to_stringDate(Long Input_unix_timestamp_10digits,String Pattern) {
	java.util.Date d = new java.util.Date(Input_unix_timestamp_10digits*1000);
	String Date_formated = TalendDate.formatDate(Pattern,d);
	return Date_formated;
    }


/**
 * Renvoie une date (String) à partir d'un timestamp Unix (String) sur 13 digits
 * 
 * 
 * {talendTypes} String
 * 
 * {Category} Date_Utils
 * 
 * {param} long(input_timestamp) input: The string need to be printed.
 * {param} string("pattern_output_date") input: The string need to be printed.
 * 
 * {example} helloExemple("world") # hello world !.
 */
public static String convert_unix_timestamp_13_digits_to_stringDate(Long Input_unix_timestamp_10digits,String Pattern) {
java.util.Date d = new java.util.Date(Input_unix_timestamp_10digits);
String Date_formated = TalendDate.formatDate(Pattern,d);
return Date_formated;
}


//mois lib



/**
 * Renvoie le jour de la semaine (ex : lundi) à partir d'une date
 * 
 * 
 * {talendTypes} String
 * 
 * {Category} Date_Utils
 * 
 * {param} date(InputDate) input: The string need to be printed.
 * 
 * {example} helloExemple("world") # hello world !.
 */
public static String libelle_jour_semaine(Date InputDate) {

GregorianCalendar calendar = new GregorianCalendar();
calendar.setTime(InputDate);
int numero_jour =calendar.get(calendar.DAY_OF_WEEK);
String jour = "";
switch (numero_jour) {
case GregorianCalendar.MONDAY:
	jour = "lundi";
	break;
case GregorianCalendar.TUESDAY:
	 jour = "mardi";
	 break;
case GregorianCalendar.WEDNESDAY:
	jour = "mercredi";
	break;
case GregorianCalendar.THURSDAY:
	jour = "jeudi";
	break;
case GregorianCalendar.FRIDAY:
	jour = "vendredi";
	break;
case GregorianCalendar.SATURDAY:
	jour = "samedi";
	break;
case GregorianCalendar.SUNDAY:
	jour = "dimanche";
	break;
	}
return jour;
}



/**
 * Renvoie le numéro de la semaine (int) à partir d'une date
 * 
 * 
 * {talendTypes} String
 * 
 * {Category} Date_Utils
 * 
 * {param} date(InputDate) input: The string need to be printed.
 * 
 * {example} helloExemple("world") # hello world !.
 */
public static Integer numero_semaine(Date InputDate) {

GregorianCalendar calendar = new GregorianCalendar();
calendar.setTime(InputDate);
int numero_semaine =calendar.get(calendar.WEEK_OF_YEAR);
return numero_semaine;
}


/**
 * Renvoie le mois (ex:janvier) à partir d'une date
 * 
 * 
 * {talendTypes} String
 * 
 * {Category} Date_Utils
 * 
 * {param} date(InputDate) input: The string need to be printed.
 * 
 * {example} helloExemple("world") # hello world !.
 */
public static String libelle_mois(Date InputDate) {

GregorianCalendar calendar = new GregorianCalendar();
calendar.setTime(InputDate);
int numero_mois =calendar.get(calendar.MONTH);
String mois = "INVALIDE";
switch (numero_mois) {
case 0:
	mois = "janvier";
	break;
case 1:
	mois = "fevrier";
	 break;
case 2:
	mois = "mars";
	 break;
case 3:
	mois = "avril";
	 break;
case 4:
	mois = "mai";
	 break;
case 5:
	mois = "juin";
	 break;
case 6:
	mois = "juillet";
	 break;
case 7:
	mois = "aout";
	 break;
case 8:
	mois = "septembre";
	 break;
case 9:
	mois = "octobre";
	 break;
case 10:
	mois = "novembre";
	 break;
case 11:
	mois = "decembre";
	 break;
	}
return mois;
}



}



